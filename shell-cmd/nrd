#!/usr/bin/python3
#
# nrd -- Numerous Display
#
# Displays all of your numerous variables and values in text form
# Basically this is a shell version of the numerous app on your phone
# (except it's just a display no setting/etc)
#
# options:
#     -c credspec        as in nr / numerousKey
#     -m metricspec      see below, can be repeated
#     -x excludespec     see below, can be repeated
#     -f fieldspec       fields to display
#
# Metric specification:
#   There are several ways you can tell this what metrics to show.
#   The simplest is the NRDMETRICS environment variable, which should
#   be set to a SLASH-separated list of metric labels or IDs ('/' is illegal
#   in metric IDs, hence the choice as a separator; if your metric label has
#   a '/' in it then you will have to use the metric ID for that one).
#   Exactly those metrics will be displayed. Alternatively you can build this
#   list from the -m command option, giving one or more slash-separated
#   "metricspec" args. All are concatenated so the following are equivalent:
#          -m M1/M2/M3
#          -m M1 -m M2/M3
#
#   If -m is given, NRDMETRICS environment variable is ignored.
#
#   You can also exclude some metrics with -x ... same syntax as -m but
#   the given metrics will NOT be displayed. Using -x with -m at the
#   same time is legal, but silly.  You can default -x with NRDEXCLUDE.
#
# Field specification:
#   By default the value of a metric is displayed. You can control this
#   with -f, explicitly specifying the fields you want to see for each
#   metric. The -f argument can be given multiple times, so, for example:
#
#        -f value -f description
#
#  would display the value and the description for each metric.
#  If a field is a subfield of another dictionary, specify x.y, e.g.:
#
#        -f links.web
#
#  to display the 'web' element of the 'links' attribute.
#

from numerous import Numerous, numerousKey, NumerousAuthError
import os
import argparse
import time

parser = argparse.ArgumentParser()

parser.add_argument('-m', '--metrics', action='append')
parser.add_argument('-x', '--exclude', action='append')
parser.add_argument('-c', '--credspec')
parser.add_argument('-f', '--fields', action='append')

args = parser.parse_args()

if not args.fields:
    args.fields=['value']

nr = Numerous(apiKey=numerousKey(args.credspec))
try:
    nr.ping()        # just to validate this before anything else
except NumerousAuthError:
    print("Could not connect to Numerous; likely cause is bad credentials.")
    exit(1)

mIDsRqstd = []

if not args.metrics:
    evn = os.environ.get('NRDMETRICS', None)
    if evn:
         args.metrics = [ evn ]

if args.metrics:
    for mIDspec in args.metrics:
        for mId in mIDspec.split('/'):
            mIDsRqstd.append(mId)

if not args.exclude:
    evn = os.environ.get('NRDEXCLUDE', None)
    if evn:
         args.exclude = [ evn ]

mIDsExcluded = []
if args.exclude:
    for mIDspec in args.exclude:
        for mId in mIDspec.split('/'):
            mIDsExcluded.append(mId)


#
# Get all of the metrics you are subscribed to. This is the maximum set of
# metrics we will display, possibly filtered by the metricsIDsRequested list
#

firstone=True
n = 0
for subs in nr.subscriptions():
    mId = subs['metricId']
    m = nr.metric(mId)
    md = m.read(dictionary=True)

    # print it if: printing all, or if the ID or name are in the requested list
    if ((not mIDsRqstd) or (mId in mIDsRqstd) or (md['label'] in mIDsRqstd)) \
        and not ((mId in mIDsExcluded) or (md['label'] in mIDsExcluded)):

        fs = ""
        for fname in args.fields:
            if fname == 'value':
                # special decoding for value
                if md['kind'] == 'timer':
                    # note that for timers we are printing the time
                    # of the EVENT whereas the actual app prints the time
                    # until/since the event
                    fs += time.strftime('%Y-%m-%d %H:%M:%S ', time.localtime(md['value']))
                elif md['kind'] == 'currency':
                    fs += "${:.2f} ".format(md['value'])
                elif md['kind'] == 'percent':
                    fs += "{:.2f}% ".format(md['value']*100)
                else:
                    fs += "{} ".format(md['value'])
            elif '.' in fname:
                # XXX this should be recursive but currently just one level
                try:
                    x = fname.split('.')
                    fs += "{} ".format(md[x[0]][x[1]])
                except:
                    fs += "??{}?? ".format(fname)
            else:
                try:
                    fs += "{} ".format(md[fname])
                except:
                    fs += "??{}?? ".format(fname)


        if n == 0 and not firstone:
            print("")

        print("{:<40s}  {}".format(md['label'],fs))
        firstone = False
        n = (n + 1) % 5
